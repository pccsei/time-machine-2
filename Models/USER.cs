//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _14_TimeMachine2.Models
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.ComponentModel.DataAnnotations;
    using System.Web.Mvc;
    
    public partial class USER
    {
        TM2Entities2 db = new TM2Entities2();

        public USER()
        {
            this.ENTRies = new HashSet<ENTRY>();
            this.MEMBERs = new HashSet<MEMBER>();
            this.PROJECTs = new HashSet<PROJECT>();
        }
    
        [Display(Name = "User ID")]
        public string user_id { get; set; }
        public Nullable<short> user_is_enabled { get; set; }
        [Display(Name = "First Name")]
        public string user_first_name { get; set; }
        [Display(Name = "Last Name")]
        public string user_last_name { get; set; }
        public Nullable<short> user_is_student { get; set; }
        public Nullable<short> user_is_teacher { get; set; }
        public Nullable<short> user_is_manager { get; set; }
    
        public virtual ICollection<ENTRY> ENTRies { get; set; }
        public virtual ICollection<MEMBER> MEMBERs { get; set; }
        public virtual ICollection<PROJECT> PROJECTs { get; set; }

        // ryoder [start]
        public bool is_student()
        {
            return (this.user_is_student == 1);
        }

        public bool is_teacher()
        {
            return (this.user_is_teacher == 1);
        }

        public bool is_manager()
        {
            return (this.user_is_manager == 1);
        }

        public bool is_enabled()
        {
            return (this.user_is_enabled == 1);
        }

        public void toggle_status()
        {
            this.user_is_enabled = (short)(this.user_is_enabled ^ 1);
            return;
        }

        public List<COURSE> getCoursesForUser()
        {
            List<COURSE> courseList = new List<COURSE>();

            foreach (MEMBER m in this.MEMBERs)
            {
                courseList.Add(db.COURSEs.Find(m.member_course_id));
            }

            return courseList;
        }

        public List<PROJECT> getProjects(bool all_courses = false)
        {
            List<PROJECT> projectList = new List<PROJECT>();

            if (all_courses)
            {
                List<COURSE> courseList = this.getCoursesForUser();

                foreach (COURSE m in courseList)
                {
                    projectList.AddRange(db.PROJECTs.Where(p => p.project_course_id == m.course_id));
                }
            }
            else
                projectList.AddRange(db.PROJECTs.Where(p => p.project_course_id == GlobalVariables.selected_course_id));

            return projectList;
        }

        public List<ENTRY> getEntries(bool all_courses = false)
        {
            List<ENTRY> entryList = new List<ENTRY>();

            if (all_courses)
                entryList = this.ENTRies.ToList();
            else
                foreach (PROJECT p in this.getProjects())
                    entryList.AddRange(this.ENTRies.Where(e => e.entry_project_id == p.project_id));

            return entryList.OrderBy(e => e.entry_id).ToList();
        }

        // Return a Select List of active projects for the user with parenthetical course name
        //public List<SelectListItem> getProjectSelectList()
        //{
        //    List<PROJECT> project_list = this.getProjects();
        //    List<SelectListItem> project_select_list = new List<SelectListItem>();
        //    foreach (PROJECT p in project_list)
        //    {
        //        COURSE parent_course = db.COURSEs.Find(p.project_course_id);
        //        if (p.project_is_enabled == 1 && parent_course.course_is_enabled == 1)
        //        {
        //            project_select_list.Add(new SelectListItem()
        //            {
        //                Text = p.project_name + " (" + parent_course.course_name + ")",
        //                Value = p.project_id.ToString()
        //            });
        //        }
        //    }
        //    return project_select_list;
        //}


        //public SelectList getProjectSelectList()
        //{
        //    List<PROJECT> userProjects = this.getProjectsForUser();


        //    foreach (PROJECT p in userProjects)
        //    {
        //    }

        //    SelectList list = new SelectList(userProjects, "project_id", "project_name", this.getLastProjectSelected());

        //    return list;
        //}

        public List<float> getSummaryStatsForCourse(int? course_id = null)
        {
            COURSE course;
            List<PROJECT> projects;
            List<float> stats = new List<float>();

            if (course_id == null || db.COURSEs.Find(course_id) == null)
                course = GlobalVariables.selected_course;
            else
                course = db.COURSEs.Find(course_id);

            projects = course.PROJECTs.ToList();

            for (var x = 1; x <= 4; x++)
                stats.Add(0.0f);

            // Total hours
            foreach (ENTRY e in this.ENTRies)
            {
                if (projects.Find(
                        delegate(PROJECT p)
                        {
                            return p.project_id == e.entry_project_id;
                        }
                    ) != null)
                {
                    stats[0] += (float) e.entry_total_time / 60.0f;
                }
            }

            // Hours per day
            stats[1] = stats[0] / (float) (course.getLatestDay() - course.course_begin_date).Days;

            // Hours per week
            stats[2] = stats[1] * 7.0f;

            // Projected Grade
            stats[3] = stats[2] * (float) course.course_ref_grade / (float) course.course_ref_hours;
            if (stats[3] > 110.0f)
                stats[3] = 110.0f;

            return stats;
        }

        public List<float> getWeeklyHoursForCourse(int course_id)
        {
            var course = db.COURSEs.Find(course_id);
            var projects = course.PROJECTs.ToList();
            int latestWeek = course.getLatestWeek();

            DateTime relStartDay = course.getRelativeStartTime();
            int lastEntryWeek = course.getLastEntryWeek();

            List<int> projectIDs = new List<int>();
            foreach (PROJECT project in course.PROJECTs)
            {
                projectIDs.Add(project.project_id);
            }

            List<float> weeks = new List<float>();
            for (int w = 1; w <= latestWeek; w++)
                weeks.Add(0.0f);

            foreach (ENTRY entry in this.ENTRies)
            {
                if (projectIDs.Contains((int)entry.entry_project_id))
                {
                    Double entryDay = ((DateTime)entry.entry_end_time - relStartDay).TotalDays;
                    int entryWeek = (int)Math.Floor(entryDay / 7.0) + 1;
                    if (entryDay < 0.0) entryWeek = 1;
                    if (entryWeek > lastEntryWeek) entryWeek = lastEntryWeek;
                    if (entryWeek <= latestWeek)
                        weeks[entryWeek - 1] += (float) entry.entry_total_time / 60.0f;
                }
            }

            return weeks;
        }


        public class USER_SortByLastName : IComparer<USER>
        {

            #region IComparable<USER> Members

            public int Compare(USER x, USER y)
            {
                return string.Compare(x.user_last_name, y.user_last_name);
            }

            #endregion
        }
    }
}
