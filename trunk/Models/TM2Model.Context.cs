//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace _14_TimeMachine2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class TM2Entities : DbContext
    {
        public TM2Entities()
            : base("name=TM2Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<CATEGORY> CATEGORies { get; set; }
        public DbSet<COURSE> COURSEs { get; set; }
        public DbSet<ENTRY> ENTRies { get; set; }
        public DbSet<LOCATION> LOCATIONs { get; set; }
        public DbSet<MEMBER> MEMBERs { get; set; }
        public DbSet<PROJECT> PROJECTs { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<USER> USERs { get; set; }
        public DbSet<TEACHER> TEACHERS { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int tm_AddUserToCourse(string userID, Nullable<int> courseID, Nullable<int> viewAll, string first, string last, string position)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            var viewAllParameter = viewAll.HasValue ?
                new ObjectParameter("viewAll", viewAll) :
                new ObjectParameter("viewAll", typeof(int));
    
            var firstParameter = first != null ?
                new ObjectParameter("first", first) :
                new ObjectParameter("first", typeof(string));
    
            var lastParameter = last != null ?
                new ObjectParameter("last", last) :
                new ObjectParameter("last", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("position", position) :
                new ObjectParameter("position", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_AddUserToCourse", userIDParameter, courseIDParameter, viewAllParameter, firstParameter, lastParameter, positionParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> tm_CalculateCourseWeeks(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("tm_CalculateCourseWeeks", courseIDParameter);
        }
    
        public virtual int tm_CreateCatagory(string name, string user_id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var user_idParameter = user_id != null ?
                new ObjectParameter("user_id", user_id) :
                new ObjectParameter("user_id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_CreateCatagory", nameParameter, user_idParameter);
        }
    
        public virtual int tm_CreateCourse(string courseName, string userID, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> submitDay)
        {
            var courseNameParameter = courseName != null ?
                new ObjectParameter("courseName", courseName) :
                new ObjectParameter("courseName", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var submitDayParameter = submitDay.HasValue ?
                new ObjectParameter("submitDay", submitDay) :
                new ObjectParameter("submitDay", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_CreateCourse", courseNameParameter, userIDParameter, beginDateParameter, endDateParameter, submitDayParameter);
        }
    
        public virtual int tm_CreateProject(Nullable<int> courseID, string name, string userID, string description, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_CreateProject", courseIDParameter, nameParameter, userIDParameter, descriptionParameter, beginDateParameter, endDateParameter);
        }
    
        public virtual int tm_CreateTeacher(string userID, string firstName, string lastName, Nullable<int> enabled, Nullable<int> isStudent, Nullable<int> isTeacher, Nullable<int> isManager)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("enabled", enabled) :
                new ObjectParameter("enabled", typeof(int));
    
            var isStudentParameter = isStudent.HasValue ?
                new ObjectParameter("isStudent", isStudent) :
                new ObjectParameter("isStudent", typeof(int));
    
            var isTeacherParameter = isTeacher.HasValue ?
                new ObjectParameter("isTeacher", isTeacher) :
                new ObjectParameter("isTeacher", typeof(int));
    
            var isManagerParameter = isManager.HasValue ?
                new ObjectParameter("isManager", isManager) :
                new ObjectParameter("isManager", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_CreateTeacher", userIDParameter, firstNameParameter, lastNameParameter, enabledParameter, isStudentParameter, isTeacherParameter, isManagerParameter);
        }
    
        public virtual int tm_CreateTimeEntry(string userID, Nullable<int> projectID, Nullable<int> locationID, Nullable<int> catagoryID, Nullable<System.DateTime> beginTime, Nullable<System.DateTime> endTime, string accomplished, string comment)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(int));
    
            var catagoryIDParameter = catagoryID.HasValue ?
                new ObjectParameter("catagoryID", catagoryID) :
                new ObjectParameter("catagoryID", typeof(int));
    
            var beginTimeParameter = beginTime.HasValue ?
                new ObjectParameter("beginTime", beginTime) :
                new ObjectParameter("beginTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.DateTime));
    
            var accomplishedParameter = accomplished != null ?
                new ObjectParameter("accomplished", accomplished) :
                new ObjectParameter("accomplished", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_CreateTimeEntry", userIDParameter, projectIDParameter, locationIDParameter, catagoryIDParameter, beginTimeParameter, endTimeParameter, accomplishedParameter, commentParameter);
        }
    
        public virtual int tm_CreateUser(string userID, string firstName, string lastName, Nullable<int> enabled, Nullable<int> isStudent, Nullable<int> isTeacher, Nullable<int> isManager)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var enabledParameter = enabled.HasValue ?
                new ObjectParameter("enabled", enabled) :
                new ObjectParameter("enabled", typeof(int));
    
            var isStudentParameter = isStudent.HasValue ?
                new ObjectParameter("isStudent", isStudent) :
                new ObjectParameter("isStudent", typeof(int));
    
            var isTeacherParameter = isTeacher.HasValue ?
                new ObjectParameter("isTeacher", isTeacher) :
                new ObjectParameter("isTeacher", typeof(int));
    
            var isManagerParameter = isManager.HasValue ?
                new ObjectParameter("isManager", isManager) :
                new ObjectParameter("isManager", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_CreateUser", userIDParameter, firstNameParameter, lastNameParameter, enabledParameter, isStudentParameter, isTeacherParameter, isManagerParameter);
        }
    
        public virtual int tm_DeleteCourse(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_DeleteCourse", courseIDParameter);
        }
    
        public virtual int tm_DeleteProject(Nullable<int> projectID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_DeleteProject", projectIDParameter);
        }
    
        public virtual int tm_DeleteTimeEntry(Nullable<int> entryID)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("entryID", entryID) :
                new ObjectParameter("entryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_DeleteTimeEntry", entryIDParameter);
        }
    
        public virtual int tm_DisableUser(string userID, Nullable<int> value)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_DisableUser", userIDParameter, valueParameter);
        }
    
        public virtual ObjectResult<tm_GetCategoryList_Result> tm_GetCategoryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetCategoryList_Result>("tm_GetCategoryList");
        }
    
        public virtual ObjectResult<tm_GetCourse_Result> tm_GetCourse(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetCourse_Result>("tm_GetCourse", courseIDParameter);
        }
    
        public virtual ObjectResult<tm_GetCourseList_Result> tm_GetCourseList(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetCourseList_Result>("tm_GetCourseList", yearParameter);
        }
    
        public virtual ObjectResult<tm_GetCourseMember_Result> tm_GetCourseMember(Nullable<int> courseID, string userID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetCourseMember_Result>("tm_GetCourseMember", courseIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<tm_GetCourseMembers_Result> tm_GetCourseMembers(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetCourseMembers_Result>("tm_GetCourseMembers", courseIDParameter);
        }
    
        public virtual ObjectResult<tm_GetCourseProjects_Result> tm_GetCourseProjects(Nullable<int> courses_id)
        {
            var courses_idParameter = courses_id.HasValue ?
                new ObjectParameter("courses_id", courses_id) :
                new ObjectParameter("courses_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetCourseProjects_Result>("tm_GetCourseProjects", courses_idParameter);
        }
    
        public virtual ObjectResult<tm_GetCoursesByMember_Result> tm_GetCoursesByMember(string memberID)
        {
            var memberIDParameter = memberID != null ?
                new ObjectParameter("memberID", memberID) :
                new ObjectParameter("memberID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetCoursesByMember_Result>("tm_GetCoursesByMember", memberIDParameter);
        }
    
        public virtual ObjectResult<tm_GetCourseWeeklyStats_Result> tm_GetCourseWeeklyStats(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetCourseWeeklyStats_Result>("tm_GetCourseWeeklyStats", courseIDParameter);
        }
    
        public virtual ObjectResult<tm_GetLocationList_Result> tm_GetLocationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetLocationList_Result>("tm_GetLocationList");
        }
    
        public virtual ObjectResult<tm_GetProjects_Result> tm_GetProjects()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetProjects_Result>("tm_GetProjects");
        }
    
        public virtual ObjectResult<tm_GetStudents_Result> tm_GetStudents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetStudents_Result>("tm_GetStudents");
        }
    
        public virtual ObjectResult<tm_getTeacherFromCourse_Result> tm_getTeacherFromCourse(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_getTeacherFromCourse_Result>("tm_getTeacherFromCourse", courseIDParameter);
        }
    
        public virtual ObjectResult<tm_GetTeachers_Result> tm_GetTeachers(Nullable<int> showall)
        {
            var showallParameter = showall.HasValue ?
                new ObjectParameter("showall", showall) :
                new ObjectParameter("showall", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetTeachers_Result>("tm_GetTeachers", showallParameter);
        }
    
        public virtual ObjectResult<tm_GetTeachersCourses_Result> tm_GetTeachersCourses(string teacherID, string year)
        {
            var teacherIDParameter = teacherID != null ?
                new ObjectParameter("teacherID", teacherID) :
                new ObjectParameter("teacherID", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetTeachersCourses_Result>("tm_GetTeachersCourses", teacherIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<tm_GetTeachersStudents_Result> tm_GetTeachersStudents(string teacherID, string year)
        {
            var teacherIDParameter = teacherID != null ?
                new ObjectParameter("teacherID", teacherID) :
                new ObjectParameter("teacherID", typeof(string));
    
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetTeachersStudents_Result>("tm_GetTeachersStudents", teacherIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> tm_GetTeachersYears(string teacherID)
        {
            var teacherIDParameter = teacherID != null ?
                new ObjectParameter("teacherID", teacherID) :
                new ObjectParameter("teacherID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("tm_GetTeachersYears", teacherIDParameter);
        }
    
        public virtual int tm_GetTimeDiff(Nullable<System.DateTime> beginTime, Nullable<System.DateTime> endTime)
        {
            var beginTimeParameter = beginTime.HasValue ?
                new ObjectParameter("beginTime", beginTime) :
                new ObjectParameter("beginTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_GetTimeDiff", beginTimeParameter, endTimeParameter);
        }
    
        public virtual ObjectResult<tm_GetTimeEntry_Result> tm_GetTimeEntry(Nullable<int> entryID)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("entryID", entryID) :
                new ObjectParameter("entryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetTimeEntry_Result>("tm_GetTimeEntry", entryIDParameter);
        }
    
        public virtual ObjectResult<tm_getTimeLog_Result> tm_getTimeLog(string studentID, Nullable<int> projectID, Nullable<int> courseID)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("studentID", studentID) :
                new ObjectParameter("studentID", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_getTimeLog_Result>("tm_getTimeLog", studentIDParameter, projectIDParameter, courseIDParameter);
        }
    
        public virtual int tm_getTimeLogFilter(string studentID, Nullable<int> projectID, Nullable<int> courseID)
        {
            var studentIDParameter = studentID != null ?
                new ObjectParameter("studentID", studentID) :
                new ObjectParameter("studentID", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_getTimeLogFilter", studentIDParameter, projectIDParameter, courseIDParameter);
        }
    
        public virtual ObjectResult<tm_GetTimeLogs_Result> tm_GetTimeLogs(string teacherID, Nullable<int> year)
        {
            var teacherIDParameter = teacherID != null ?
                new ObjectParameter("teacherID", teacherID) :
                new ObjectParameter("teacherID", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetTimeLogs_Result>("tm_GetTimeLogs", teacherIDParameter, yearParameter);
        }
    
        public virtual ObjectResult<tm_GetUser_Result> tm_GetUser(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetUser_Result>("tm_GetUser", userIDParameter);
        }
    
        public virtual ObjectResult<tm_GetUserProjects_Result> tm_GetUserProjects(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetUserProjects_Result>("tm_GetUserProjects", userIDParameter);
        }
    
        public virtual ObjectResult<tm_GetUsers_Result> tm_GetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetUsers_Result>("tm_GetUsers");
        }
    
        public virtual ObjectResult<tm_GetUsersByType_Result> tm_GetUsersByType(Nullable<int> isStudent, Nullable<int> isTeacher, Nullable<int> isManager)
        {
            var isStudentParameter = isStudent.HasValue ?
                new ObjectParameter("isStudent", isStudent) :
                new ObjectParameter("isStudent", typeof(int));
    
            var isTeacherParameter = isTeacher.HasValue ?
                new ObjectParameter("isTeacher", isTeacher) :
                new ObjectParameter("isTeacher", typeof(int));
    
            var isManagerParameter = isManager.HasValue ?
                new ObjectParameter("isManager", isManager) :
                new ObjectParameter("isManager", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tm_GetUsersByType_Result>("tm_GetUsersByType", isStudentParameter, isTeacherParameter, isManagerParameter);
        }
    
        public virtual int tm_GetUserTimeLog(Nullable<int> projectID, string userID)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_GetUserTimeLog", projectIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> tm_IsValidEntryTime(Nullable<int> entryID, string entryUserID, Nullable<System.DateTime> entryBeginTime, Nullable<System.DateTime> entryEndTime, Nullable<int> entryTotalTime, Nullable<int> projectID)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("entryID", entryID) :
                new ObjectParameter("entryID", typeof(int));
    
            var entryUserIDParameter = entryUserID != null ?
                new ObjectParameter("entryUserID", entryUserID) :
                new ObjectParameter("entryUserID", typeof(string));
    
            var entryBeginTimeParameter = entryBeginTime.HasValue ?
                new ObjectParameter("entryBeginTime", entryBeginTime) :
                new ObjectParameter("entryBeginTime", typeof(System.DateTime));
    
            var entryEndTimeParameter = entryEndTime.HasValue ?
                new ObjectParameter("entryEndTime", entryEndTime) :
                new ObjectParameter("entryEndTime", typeof(System.DateTime));
    
            var entryTotalTimeParameter = entryTotalTime.HasValue ?
                new ObjectParameter("entryTotalTime", entryTotalTime) :
                new ObjectParameter("entryTotalTime", typeof(int));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("tm_IsValidEntryTime", entryIDParameter, entryUserIDParameter, entryBeginTimeParameter, entryEndTimeParameter, entryTotalTimeParameter, projectIDParameter);
        }
    
        public virtual int tm_RemoveUserFromCourse(string memberUserID, Nullable<int> memberCourseID)
        {
            var memberUserIDParameter = memberUserID != null ?
                new ObjectParameter("memberUserID", memberUserID) :
                new ObjectParameter("memberUserID", typeof(string));
    
            var memberCourseIDParameter = memberCourseID.HasValue ?
                new ObjectParameter("memberCourseID", memberCourseID) :
                new ObjectParameter("memberCourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_RemoveUserFromCourse", memberUserIDParameter, memberCourseIDParameter);
        }
    
        public virtual int tm_UpdateCourse(Nullable<int> courseID, string courseName, Nullable<int> submitDay, Nullable<System.DateTime> createDate, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<short> courseEnabled)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            var courseNameParameter = courseName != null ?
                new ObjectParameter("courseName", courseName) :
                new ObjectParameter("courseName", typeof(string));
    
            var submitDayParameter = submitDay.HasValue ?
                new ObjectParameter("submitDay", submitDay) :
                new ObjectParameter("submitDay", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("createDate", createDate) :
                new ObjectParameter("createDate", typeof(System.DateTime));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var courseEnabledParameter = courseEnabled.HasValue ?
                new ObjectParameter("courseEnabled", courseEnabled) :
                new ObjectParameter("courseEnabled", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_UpdateCourse", courseIDParameter, courseNameParameter, submitDayParameter, createDateParameter, beginDateParameter, endDateParameter, courseEnabledParameter);
        }
    
        public virtual int tm_UpdateProject(Nullable<int> projectID, Nullable<int> courseID, string projectName, string createdBy, Nullable<System.DateTime> dateCreated, string description, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<short> isEnabled)
        {
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("courseID", courseID) :
                new ObjectParameter("courseID", typeof(int));
    
            var projectNameParameter = projectName != null ?
                new ObjectParameter("projectName", projectName) :
                new ObjectParameter("projectName", typeof(string));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("dateCreated", dateCreated) :
                new ObjectParameter("dateCreated", typeof(System.DateTime));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("beginDate", beginDate) :
                new ObjectParameter("beginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var isEnabledParameter = isEnabled.HasValue ?
                new ObjectParameter("isEnabled", isEnabled) :
                new ObjectParameter("isEnabled", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_UpdateProject", projectIDParameter, courseIDParameter, projectNameParameter, createdByParameter, dateCreatedParameter, descriptionParameter, beginDateParameter, endDateParameter, isEnabledParameter);
        }
    
        public virtual int tm_UpdateTimeLog(Nullable<int> entryID, Nullable<System.DateTime> beginTime, Nullable<System.DateTime> endTime, string workAccomplished, string comment, string userID, Nullable<int> projectID, Nullable<int> locationID, Nullable<int> categoryID)
        {
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("entryID", entryID) :
                new ObjectParameter("entryID", typeof(int));
    
            var beginTimeParameter = beginTime.HasValue ?
                new ObjectParameter("beginTime", beginTime) :
                new ObjectParameter("beginTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("endTime", endTime) :
                new ObjectParameter("endTime", typeof(System.DateTime));
    
            var workAccomplishedParameter = workAccomplished != null ?
                new ObjectParameter("workAccomplished", workAccomplished) :
                new ObjectParameter("workAccomplished", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("comment", comment) :
                new ObjectParameter("comment", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var projectIDParameter = projectID.HasValue ?
                new ObjectParameter("projectID", projectID) :
                new ObjectParameter("projectID", typeof(int));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("categoryID", categoryID) :
                new ObjectParameter("categoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_UpdateTimeLog", entryIDParameter, beginTimeParameter, endTimeParameter, workAccomplishedParameter, commentParameter, userIDParameter, projectIDParameter, locationIDParameter, categoryIDParameter);
        }
    
        public virtual int tm_UpdateUser(string userID, Nullable<short> userIsEnabled, string userFirst, string userLast, Nullable<short> userIsStudent, Nullable<short> userIsTeacher, Nullable<short> userIsManager)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(string));
    
            var userIsEnabledParameter = userIsEnabled.HasValue ?
                new ObjectParameter("userIsEnabled", userIsEnabled) :
                new ObjectParameter("userIsEnabled", typeof(short));
    
            var userFirstParameter = userFirst != null ?
                new ObjectParameter("userFirst", userFirst) :
                new ObjectParameter("userFirst", typeof(string));
    
            var userLastParameter = userLast != null ?
                new ObjectParameter("userLast", userLast) :
                new ObjectParameter("userLast", typeof(string));
    
            var userIsStudentParameter = userIsStudent.HasValue ?
                new ObjectParameter("UserIsStudent", userIsStudent) :
                new ObjectParameter("UserIsStudent", typeof(short));
    
            var userIsTeacherParameter = userIsTeacher.HasValue ?
                new ObjectParameter("userIsTeacher", userIsTeacher) :
                new ObjectParameter("userIsTeacher", typeof(short));
    
            var userIsManagerParameter = userIsManager.HasValue ?
                new ObjectParameter("userIsManager", userIsManager) :
                new ObjectParameter("userIsManager", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("tm_UpdateUser", userIDParameter, userIsEnabledParameter, userFirstParameter, userLastParameter, userIsStudentParameter, userIsTeacherParameter, userIsManagerParameter);
        }
    }
}
